// Code generated by hertz generator.

package core_api

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	core_api "github.com/xh-polaris/psych-core-api/biz/application/dto/core_api"
	"github.com/xh-polaris/psych-core-api/biz/infra/config"
	cst "github.com/xh-polaris/psych-core-api/biz/infra/consts"
	rpc "github.com/xh-polaris/psych-core-api/biz/infra/rpc"
	"github.com/xh-polaris/psych-core-api/biz/infra/utils"
	u "github.com/xh-polaris/psych-idl/kitex_gen/user"
)

// SignIn .
// @router /user/sign_in [POST]
func SignIn(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UserSignInReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用接口
	client := rpc.GetPsychUser()
	userResp, err := client.UserSignIn(ctx, &u.UserSignInReq{
		UnitId:     req.UnitId,
		AuthType:   req.AuthType,
		AuthId:     req.AuthId,
		VerifyCode: req.VerifyCode,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	jwt, err := utils.GenerateJwt(config.GetConfig().Auth.SecretKey, map[string]any{
		cst.UnitId:    userResp.UnitId,
		cst.UserId:    userResp.UserId,
		cst.StudentId: userResp.StudentId,
		cst.Strong:    userResp.Strong,
	})
	resp := &core_api.UserSignInResp{
		UnitId:    userResp.UnitId,
		UserId:    userResp.UserId,
		StudentId: userResp.StudentId,
		Strong:    userResp.Strong,
		Token:     jwt,
	}

	c.JSON(consts.StatusOK, resp)
}
